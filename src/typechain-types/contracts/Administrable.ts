/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Administrable {
  export type AdminInfoStruct = {
    role: BigNumberish;
    joinTimestamp: BigNumberish;
    isActive: boolean;
  };

  export type AdminInfoStructOutput = [
    role: bigint,
    joinTimestamp: bigint,
    isActive: boolean
  ] & { role: bigint; joinTimestamp: bigint; isActive: boolean };
}

export interface AdministrableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "adminInfo"
      | "adminList"
      | "changeAdminRole"
      | "emergencyAddAdmin"
      | "emergencyMode"
      | "emergencyStartTime"
      | "emergencyTriggeredBy"
      | "getAdminInfo"
      | "getAdminRole"
      | "getAllAdmins"
      | "hasRole"
      | "isAdmin"
      | "removeAdmin"
      | "resolveEmergency"
      | "totalAdmins"
      | "triggerEmergency"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "AdminRoleChanged"
      | "EmergencyModeToggled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdminRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyAddAdmin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTriggeredBy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEmergency",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTriggeredBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerEmergency",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [admin: AddressLike, role: BigNumberish];
  export type OutputTuple = [admin: string, role: bigint];
  export interface OutputObject {
    admin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike, role: BigNumberish];
  export type OutputTuple = [admin: string, role: bigint];
  export interface OutputObject {
    admin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRoleChangedEvent {
  export type InputTuple = [
    admin: AddressLike,
    oldRole: BigNumberish,
    newRole: BigNumberish
  ];
  export type OutputTuple = [admin: string, oldRole: bigint, newRole: bigint];
  export interface OutputObject {
    admin: string;
    oldRole: bigint;
    newRole: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyModeToggledEvent {
  export type InputTuple = [enabled: boolean, triggeredBy: AddressLike];
  export type OutputTuple = [enabled: boolean, triggeredBy: string];
  export interface OutputObject {
    enabled: boolean;
    triggeredBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Administrable extends BaseContract {
  connect(runner?: ContractRunner | null): Administrable;
  waitForDeployment(): Promise<this>;

  interface: AdministrableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  adminInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        role: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  adminList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  changeAdminRole: TypedContractMethod<
    [admin: AddressLike, newRole: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyAddAdmin: TypedContractMethod<
    [admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  emergencyStartTime: TypedContractMethod<[], [bigint], "view">;

  emergencyTriggeredBy: TypedContractMethod<[], [string], "view">;

  getAdminInfo: TypedContractMethod<
    [_address: AddressLike],
    [Administrable.AdminInfoStructOutput],
    "view"
  >;

  getAdminRole: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  getAllAdmins: TypedContractMethod<[], [string[]], "view">;

  hasRole: TypedContractMethod<
    [admin: AddressLike, requiredRole: BigNumberish],
    [boolean],
    "view"
  >;

  isAdmin: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  removeAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  resolveEmergency: TypedContractMethod<[], [void], "nonpayable">;

  totalAdmins: TypedContractMethod<[], [bigint], "view">;

  triggerEmergency: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        role: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "adminList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "changeAdminRole"
  ): TypedContractMethod<
    [admin: AddressLike, newRole: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyAddAdmin"
  ): TypedContractMethod<
    [admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyTriggeredBy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAdminInfo"
  ): TypedContractMethod<
    [_address: AddressLike],
    [Administrable.AdminInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdminRole"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [admin: AddressLike, requiredRole: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalAdmins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "triggerEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRoleChanged"
  ): TypedContractEvent<
    AdminRoleChangedEvent.InputTuple,
    AdminRoleChangedEvent.OutputTuple,
    AdminRoleChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyModeToggled"
  ): TypedContractEvent<
    EmergencyModeToggledEvent.InputTuple,
    EmergencyModeToggledEvent.OutputTuple,
    EmergencyModeToggledEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address,uint8)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address,uint8)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "AdminRoleChanged(address,uint8,uint8)": TypedContractEvent<
      AdminRoleChangedEvent.InputTuple,
      AdminRoleChangedEvent.OutputTuple,
      AdminRoleChangedEvent.OutputObject
    >;
    AdminRoleChanged: TypedContractEvent<
      AdminRoleChangedEvent.InputTuple,
      AdminRoleChangedEvent.OutputTuple,
      AdminRoleChangedEvent.OutputObject
    >;

    "EmergencyModeToggled(bool,address)": TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;
    EmergencyModeToggled: TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;
  };
}
