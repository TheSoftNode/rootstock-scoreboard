/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type TeamInfoStruct = {
  teamName: string;
  memeTokenName: string;
  memeTokenUri: string;
  memeTokenAddress: AddressLike;
  teamLeaderAddress: AddressLike;
  score: BigNumberish;
  createdAt: BigNumberish;
  isActive: boolean;
};

export type TeamInfoStructOutput = [
  teamName: string,
  memeTokenName: string,
  memeTokenUri: string,
  memeTokenAddress: string,
  teamLeaderAddress: string,
  score: bigint,
  createdAt: bigint,
  isActive: boolean
] & {
  teamName: string;
  memeTokenName: string;
  memeTokenUri: string;
  memeTokenAddress: string;
  teamLeaderAddress: string;
  score: bigint;
  createdAt: bigint;
  isActive: boolean;
};

export declare namespace Administrable {
  export type AdminInfoStruct = {
    role: BigNumberish;
    joinTimestamp: BigNumberish;
    isActive: boolean;
  };

  export type AdminInfoStructOutput = [
    role: bigint,
    joinTimestamp: bigint,
    isActive: boolean
  ] & { role: bigint; joinTimestamp: bigint; isActive: boolean };
}

export interface TeamsManagerCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "addTeam"
      | "adminInfo"
      | "adminList"
      | "changeAdminRole"
      | "disableVoting"
      | "emergencyAddAdmin"
      | "emergencyMode"
      | "emergencyStartTime"
      | "emergencyTriggeredBy"
      | "emergencyWithdraw"
      | "getAdminInfo"
      | "getAdminRole"
      | "getAllAdmins"
      | "getScore"
      | "getTeamInfo"
      | "getTeamNames"
      | "getUserTotalVotes"
      | "getUserVoteForTeam"
      | "getVotingStatus"
      | "hasRole"
      | "isAdmin"
      | "maxVotePerUser"
      | "minimumVoteAmount"
      | "readyToVote"
      | "removeAdmin"
      | "removeTeam"
      | "reset"
      | "resolveEmergency"
      | "setReadyToVote"
      | "setVotingLimits"
      | "setVotingToken"
      | "teamLeaders"
      | "teamNames"
      | "teams"
      | "totalAdmins"
      | "totalUserVotes"
      | "totalVotes"
      | "triggerEmergency"
      | "userVotes"
      | "vote"
      | "votingEndTime"
      | "votingStartTime"
      | "votingTokenContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "AdminRoleChanged"
      | "EmergencyModeToggled"
      | "SystemReset"
      | "TeamAdded"
      | "TeamRemoved"
      | "VoteCast"
      | "VotingDisabled"
      | "VotingEnabled"
      | "VotingTokenSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTeam",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdminRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyAddAdmin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTriggeredBy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getScore", values: [string]): string;
  encodeFunctionData(functionFragment: "getTeamInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTeamNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVoteForTeam",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotePerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVoteAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readyToVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "removeTeam", values: [string]): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolveEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReadyToVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "teamLeaders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "teamNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "teams", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userVotes",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingTokenContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTriggeredBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTeamInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVoteForTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxVotePerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVoteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readyToVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReadyToVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamLeaders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamNames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "triggerEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingTokenContract",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [admin: AddressLike, role: BigNumberish];
  export type OutputTuple = [admin: string, role: bigint];
  export interface OutputObject {
    admin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike, role: BigNumberish];
  export type OutputTuple = [admin: string, role: bigint];
  export interface OutputObject {
    admin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRoleChangedEvent {
  export type InputTuple = [
    admin: AddressLike,
    oldRole: BigNumberish,
    newRole: BigNumberish
  ];
  export type OutputTuple = [admin: string, oldRole: bigint, newRole: bigint];
  export interface OutputObject {
    admin: string;
    oldRole: bigint;
    newRole: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyModeToggledEvent {
  export type InputTuple = [enabled: boolean, triggeredBy: AddressLike];
  export type OutputTuple = [enabled: boolean, triggeredBy: string];
  export interface OutputObject {
    enabled: boolean;
    triggeredBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SystemResetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamAddedEvent {
  export type InputTuple = [
    teamName: string,
    memeToken: AddressLike,
    teamLeader: AddressLike
  ];
  export type OutputTuple = [
    teamName: string,
    memeToken: string,
    teamLeader: string
  ];
  export interface OutputObject {
    teamName: string;
    memeToken: string;
    teamLeader: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamRemovedEvent {
  export type InputTuple = [teamName: string, teamLeader: AddressLike];
  export type OutputTuple = [teamName: string, teamLeader: string];
  export interface OutputObject {
    teamName: string;
    teamLeader: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    teamName: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [voter: string, teamName: string, amount: bigint];
  export interface OutputObject {
    voter: string;
    teamName: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingEnabledEvent {
  export type InputTuple = [startTime: BigNumberish, endTime: BigNumberish];
  export type OutputTuple = [startTime: bigint, endTime: bigint];
  export interface OutputObject {
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingTokenSetEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TeamsManagerCore extends BaseContract {
  connect(runner?: ContractRunner | null): TeamsManagerCore;
  waitForDeployment(): Promise<this>;

  interface: TeamsManagerCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  addTeam: TypedContractMethod<
    [
      teamName: string,
      memeTokenAddress: AddressLike,
      teamLeaderAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  adminInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        role: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  adminList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  changeAdminRole: TypedContractMethod<
    [admin: AddressLike, newRole: BigNumberish],
    [void],
    "nonpayable"
  >;

  disableVoting: TypedContractMethod<[], [void], "nonpayable">;

  emergencyAddAdmin: TypedContractMethod<
    [admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  emergencyStartTime: TypedContractMethod<[], [bigint], "view">;

  emergencyTriggeredBy: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAdminInfo: TypedContractMethod<
    [_address: AddressLike],
    [Administrable.AdminInfoStructOutput],
    "view"
  >;

  getAdminRole: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  getAllAdmins: TypedContractMethod<[], [string[]], "view">;

  getScore: TypedContractMethod<[teamName: string], [bigint], "view">;

  getTeamInfo: TypedContractMethod<
    [teamName: string],
    [TeamInfoStructOutput],
    "view"
  >;

  getTeamNames: TypedContractMethod<[], [string[]], "view">;

  getUserTotalVotes: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserVoteForTeam: TypedContractMethod<
    [user: AddressLike, teamName: string],
    [bigint],
    "view"
  >;

  getVotingStatus: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, string] & {
        isActive: boolean;
        startTime: bigint;
        endTime: bigint;
        totalVotesCount: bigint;
        votingToken: string;
      }
    ],
    "view"
  >;

  hasRole: TypedContractMethod<
    [admin: AddressLike, requiredRole: BigNumberish],
    [boolean],
    "view"
  >;

  isAdmin: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  maxVotePerUser: TypedContractMethod<[], [bigint], "view">;

  minimumVoteAmount: TypedContractMethod<[], [bigint], "view">;

  readyToVote: TypedContractMethod<[], [boolean], "view">;

  removeAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  removeTeam: TypedContractMethod<[teamName: string], [void], "nonpayable">;

  reset: TypedContractMethod<[], [void], "nonpayable">;

  resolveEmergency: TypedContractMethod<[], [void], "nonpayable">;

  setReadyToVote: TypedContractMethod<
    [duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingLimits: TypedContractMethod<
    [minAmount: BigNumberish, maxAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingToken: TypedContractMethod<
    [votingTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  teamLeaders: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  teamNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  teams: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, bigint, bigint, boolean] & {
        teamName: string;
        memeTokenName: string;
        memeTokenUri: string;
        memeTokenAddress: string;
        teamLeaderAddress: string;
        score: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  totalAdmins: TypedContractMethod<[], [bigint], "view">;

  totalUserVotes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalVotes: TypedContractMethod<[], [bigint], "view">;

  triggerEmergency: TypedContractMethod<[], [void], "nonpayable">;

  userVotes: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [bigint],
    "view"
  >;

  vote: TypedContractMethod<
    [teamName: string, transferAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingEndTime: TypedContractMethod<[], [bigint], "view">;

  votingStartTime: TypedContractMethod<[], [bigint], "view">;

  votingTokenContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTeam"
  ): TypedContractMethod<
    [
      teamName: string,
      memeTokenAddress: AddressLike,
      teamLeaderAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        role: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "adminList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "changeAdminRole"
  ): TypedContractMethod<
    [admin: AddressLike, newRole: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyAddAdmin"
  ): TypedContractMethod<
    [admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyTriggeredBy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAdminInfo"
  ): TypedContractMethod<
    [_address: AddressLike],
    [Administrable.AdminInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdminRole"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<[teamName: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTeamInfo"
  ): TypedContractMethod<[teamName: string], [TeamInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getTeamNames"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserTotalVotes"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserVoteForTeam"
  ): TypedContractMethod<
    [user: AddressLike, teamName: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, string] & {
        isActive: boolean;
        startTime: bigint;
        endTime: bigint;
        totalVotesCount: bigint;
        votingToken: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [admin: AddressLike, requiredRole: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxVotePerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumVoteAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "readyToVote"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeTeam"
  ): TypedContractMethod<[teamName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reset"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReadyToVote"
  ): TypedContractMethod<[duration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingLimits"
  ): TypedContractMethod<
    [minAmount: BigNumberish, maxAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVotingToken"
  ): TypedContractMethod<
    [votingTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "teamLeaders"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "teamNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "teams"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, bigint, bigint, boolean] & {
        teamName: string;
        memeTokenName: string;
        memeTokenUri: string;
        memeTokenAddress: string;
        teamLeaderAddress: string;
        score: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAdmins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUserVotes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "triggerEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userVotes"
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [teamName: string, transferAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingTokenContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRoleChanged"
  ): TypedContractEvent<
    AdminRoleChangedEvent.InputTuple,
    AdminRoleChangedEvent.OutputTuple,
    AdminRoleChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyModeToggled"
  ): TypedContractEvent<
    EmergencyModeToggledEvent.InputTuple,
    EmergencyModeToggledEvent.OutputTuple,
    EmergencyModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "SystemReset"
  ): TypedContractEvent<
    SystemResetEvent.InputTuple,
    SystemResetEvent.OutputTuple,
    SystemResetEvent.OutputObject
  >;
  getEvent(
    key: "TeamAdded"
  ): TypedContractEvent<
    TeamAddedEvent.InputTuple,
    TeamAddedEvent.OutputTuple,
    TeamAddedEvent.OutputObject
  >;
  getEvent(
    key: "TeamRemoved"
  ): TypedContractEvent<
    TeamRemovedEvent.InputTuple,
    TeamRemovedEvent.OutputTuple,
    TeamRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingDisabled"
  ): TypedContractEvent<
    VotingDisabledEvent.InputTuple,
    VotingDisabledEvent.OutputTuple,
    VotingDisabledEvent.OutputObject
  >;
  getEvent(
    key: "VotingEnabled"
  ): TypedContractEvent<
    VotingEnabledEvent.InputTuple,
    VotingEnabledEvent.OutputTuple,
    VotingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "VotingTokenSet"
  ): TypedContractEvent<
    VotingTokenSetEvent.InputTuple,
    VotingTokenSetEvent.OutputTuple,
    VotingTokenSetEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address,uint8)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address,uint8)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "AdminRoleChanged(address,uint8,uint8)": TypedContractEvent<
      AdminRoleChangedEvent.InputTuple,
      AdminRoleChangedEvent.OutputTuple,
      AdminRoleChangedEvent.OutputObject
    >;
    AdminRoleChanged: TypedContractEvent<
      AdminRoleChangedEvent.InputTuple,
      AdminRoleChangedEvent.OutputTuple,
      AdminRoleChangedEvent.OutputObject
    >;

    "EmergencyModeToggled(bool,address)": TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;
    EmergencyModeToggled: TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;

    "SystemReset(address)": TypedContractEvent<
      SystemResetEvent.InputTuple,
      SystemResetEvent.OutputTuple,
      SystemResetEvent.OutputObject
    >;
    SystemReset: TypedContractEvent<
      SystemResetEvent.InputTuple,
      SystemResetEvent.OutputTuple,
      SystemResetEvent.OutputObject
    >;

    "TeamAdded(string,address,address)": TypedContractEvent<
      TeamAddedEvent.InputTuple,
      TeamAddedEvent.OutputTuple,
      TeamAddedEvent.OutputObject
    >;
    TeamAdded: TypedContractEvent<
      TeamAddedEvent.InputTuple,
      TeamAddedEvent.OutputTuple,
      TeamAddedEvent.OutputObject
    >;

    "TeamRemoved(string,address)": TypedContractEvent<
      TeamRemovedEvent.InputTuple,
      TeamRemovedEvent.OutputTuple,
      TeamRemovedEvent.OutputObject
    >;
    TeamRemoved: TypedContractEvent<
      TeamRemovedEvent.InputTuple,
      TeamRemovedEvent.OutputTuple,
      TeamRemovedEvent.OutputObject
    >;

    "VoteCast(address,string,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingDisabled()": TypedContractEvent<
      VotingDisabledEvent.InputTuple,
      VotingDisabledEvent.OutputTuple,
      VotingDisabledEvent.OutputObject
    >;
    VotingDisabled: TypedContractEvent<
      VotingDisabledEvent.InputTuple,
      VotingDisabledEvent.OutputTuple,
      VotingDisabledEvent.OutputObject
    >;

    "VotingEnabled(uint256,uint256)": TypedContractEvent<
      VotingEnabledEvent.InputTuple,
      VotingEnabledEvent.OutputTuple,
      VotingEnabledEvent.OutputObject
    >;
    VotingEnabled: TypedContractEvent<
      VotingEnabledEvent.InputTuple,
      VotingEnabledEvent.OutputTuple,
      VotingEnabledEvent.OutputObject
    >;

    "VotingTokenSet(address)": TypedContractEvent<
      VotingTokenSetEvent.InputTuple,
      VotingTokenSetEvent.OutputTuple,
      VotingTokenSetEvent.OutputObject
    >;
    VotingTokenSet: TypedContractEvent<
      VotingTokenSetEvent.InputTuple,
      VotingTokenSetEvent.OutputTuple,
      VotingTokenSetEvent.OutputObject
    >;
  };
}
