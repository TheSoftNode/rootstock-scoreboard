/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AdvancedGovernance {
  export type AdminInfoStruct = {
    role: BigNumberish;
    stakedAmount: BigNumberish;
    slashCount: BigNumberish;
    rewardsClaimed: BigNumberish;
    joinTimestamp: BigNumberish;
    isActive: boolean;
  };

  export type AdminInfoStructOutput = [
    role: bigint,
    stakedAmount: bigint,
    slashCount: bigint,
    rewardsClaimed: bigint,
    joinTimestamp: bigint,
    isActive: boolean
  ] & {
    role: bigint;
    stakedAmount: bigint;
    slashCount: bigint;
    rewardsClaimed: bigint;
    joinTimestamp: bigint;
    isActive: boolean;
  };

  export type AdminActionStruct = {
    id: BigNumberish;
    actionType: BigNumberish;
    proposer: AddressLike;
    target: AddressLike;
    newRole: BigNumberish;
    amount: BigNumberish;
    data: BytesLike;
    confirmations: BigNumberish;
    requiredConfirmations: BigNumberish;
    deadline: BigNumberish;
    executed: boolean;
    cancelled: boolean;
    reason: string;
  };

  export type AdminActionStructOutput = [
    id: bigint,
    actionType: bigint,
    proposer: string,
    target: string,
    newRole: bigint,
    amount: bigint,
    data: string,
    confirmations: bigint,
    requiredConfirmations: bigint,
    deadline: bigint,
    executed: boolean,
    cancelled: boolean,
    reason: string
  ] & {
    id: bigint;
    actionType: bigint;
    proposer: string;
    target: string;
    newRole: bigint;
    amount: bigint;
    data: string;
    confirmations: bigint;
    requiredConfirmations: bigint;
    deadline: bigint;
    executed: boolean;
    cancelled: boolean;
    reason: string;
  };

  export type TimeLockStruct = {
    id: BigNumberish;
    action: AdvancedGovernance.AdminActionStruct;
    unlockTime: BigNumberish;
    executed: boolean;
    cancelled: boolean;
  };

  export type TimeLockStructOutput = [
    id: bigint,
    action: AdvancedGovernance.AdminActionStructOutput,
    unlockTime: bigint,
    executed: boolean,
    cancelled: boolean
  ] & {
    id: bigint;
    action: AdvancedGovernance.AdminActionStructOutput;
    unlockTime: bigint;
    executed: boolean;
    cancelled: boolean;
  };
}

export interface AdvancedGovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "actionConfirmations"
      | "adminInfo"
      | "adminList"
      | "canExecuteAction"
      | "cancelAction"
      | "cancelTimeLock"
      | "claimRewards"
      | "confirmAction"
      | "defaultTimeLockDelay"
      | "emergencyAddAdmin"
      | "emergencyMode"
      | "emergencyStartTime"
      | "emergencyTriggeredBy"
      | "executeAction"
      | "executeSlash"
      | "executeTimeLock"
      | "getAdminInfo"
      | "getAdminRole"
      | "getAllAdmins"
      | "getPendingAction"
      | "getPendingActionsCount"
      | "getTimeLock"
      | "hasPermission"
      | "isAdmin"
      | "minimumStake"
      | "nextActionId"
      | "nextTimeLockId"
      | "pendingActions"
      | "proposeAddAdmin"
      | "proposeRemoveAdmin"
      | "proposeRoleChange"
      | "proposeSlashAdmin"
      | "requiredConfirmations"
      | "resolveEmergency"
      | "rewardPool"
      | "rolePermissions"
      | "scheduleTimeLockAddAdmin"
      | "slashPercentage"
      | "stakeForAdmin"
      | "stakingToken"
      | "timeLocks"
      | "totalAdmins"
      | "totalStaked"
      | "triggerEmergency"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionCancelled"
      | "ActionConfirmed"
      | "ActionExecuted"
      | "ActionProposed"
      | "AdminAdded"
      | "AdminRemoved"
      | "AdminRoleChanged"
      | "AdminSlashed"
      | "AdminStaked"
      | "EmergencyModeToggled"
      | "RewardsClaimed"
      | "TimeLockExecuted"
      | "TimeLockScheduled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "actionConfirmations",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTimeLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultTimeLockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyAddAdmin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTriggeredBy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSlash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTimeLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingActionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextActionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTimeLockId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAddAdmin",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRemoveAdmin",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRoleChange",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSlashAdmin",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rolePermissions",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTimeLockAddAdmin",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeLocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "actionConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultTimeLockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTriggeredBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingActionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTimeLockId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRemoveAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRoleChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSlashAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTimeLockAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeForAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace ActionCancelledEvent {
  export type InputTuple = [actionId: BigNumberish, canceller: AddressLike];
  export type OutputTuple = [actionId: bigint, canceller: string];
  export interface OutputObject {
    actionId: bigint;
    canceller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionConfirmedEvent {
  export type InputTuple = [actionId: BigNumberish, confirmer: AddressLike];
  export type OutputTuple = [actionId: bigint, confirmer: string];
  export interface OutputObject {
    actionId: bigint;
    confirmer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionExecutedEvent {
  export type InputTuple = [actionId: BigNumberish, executor: AddressLike];
  export type OutputTuple = [actionId: bigint, executor: string];
  export interface OutputObject {
    actionId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionProposedEvent {
  export type InputTuple = [
    actionId: BigNumberish,
    proposer: AddressLike,
    actionType: BigNumberish
  ];
  export type OutputTuple = [
    actionId: bigint,
    proposer: string,
    actionType: bigint
  ];
  export interface OutputObject {
    actionId: bigint;
    proposer: string;
    actionType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminAddedEvent {
  export type InputTuple = [
    admin: AddressLike,
    role: BigNumberish,
    stakedAmount: BigNumberish
  ];
  export type OutputTuple = [admin: string, role: bigint, stakedAmount: bigint];
  export interface OutputObject {
    admin: string;
    role: bigint;
    stakedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike, role: BigNumberish];
  export type OutputTuple = [admin: string, role: bigint];
  export interface OutputObject {
    admin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRoleChangedEvent {
  export type InputTuple = [
    admin: AddressLike,
    oldRole: BigNumberish,
    newRole: BigNumberish
  ];
  export type OutputTuple = [admin: string, oldRole: bigint, newRole: bigint];
  export interface OutputObject {
    admin: string;
    oldRole: bigint;
    newRole: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminSlashedEvent {
  export type InputTuple = [
    admin: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [admin: string, amount: bigint, reason: string];
  export interface OutputObject {
    admin: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminStakedEvent {
  export type InputTuple = [admin: AddressLike, amount: BigNumberish];
  export type OutputTuple = [admin: string, amount: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyModeToggledEvent {
  export type InputTuple = [enabled: boolean, triggeredBy: AddressLike];
  export type OutputTuple = [enabled: boolean, triggeredBy: string];
  export interface OutputObject {
    enabled: boolean;
    triggeredBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [admin: AddressLike, amount: BigNumberish];
  export type OutputTuple = [admin: string, amount: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimeLockExecutedEvent {
  export type InputTuple = [lockId: BigNumberish];
  export type OutputTuple = [lockId: bigint];
  export interface OutputObject {
    lockId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimeLockScheduledEvent {
  export type InputTuple = [lockId: BigNumberish, unlockTime: BigNumberish];
  export type OutputTuple = [lockId: bigint, unlockTime: bigint];
  export interface OutputObject {
    lockId: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AdvancedGovernance extends BaseContract {
  connect(runner?: ContractRunner | null): AdvancedGovernance;
  waitForDeployment(): Promise<this>;

  interface: AdvancedGovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  actionConfirmations: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  adminInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        role: bigint;
        stakedAmount: bigint;
        slashCount: bigint;
        rewardsClaimed: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  adminList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  canExecuteAction: TypedContractMethod<
    [actionId: BigNumberish],
    [boolean],
    "view"
  >;

  cancelAction: TypedContractMethod<
    [actionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelTimeLock: TypedContractMethod<
    [lockId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  confirmAction: TypedContractMethod<
    [actionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  defaultTimeLockDelay: TypedContractMethod<[], [bigint], "view">;

  emergencyAddAdmin: TypedContractMethod<
    [admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  emergencyStartTime: TypedContractMethod<[], [bigint], "view">;

  emergencyTriggeredBy: TypedContractMethod<[], [string], "view">;

  executeAction: TypedContractMethod<
    [actionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeSlash: TypedContractMethod<
    [actionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTimeLock: TypedContractMethod<
    [lockId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAdminInfo: TypedContractMethod<
    [_address: AddressLike],
    [AdvancedGovernance.AdminInfoStructOutput],
    "view"
  >;

  getAdminRole: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  getAllAdmins: TypedContractMethod<[], [string[]], "view">;

  getPendingAction: TypedContractMethod<
    [actionId: BigNumberish],
    [AdvancedGovernance.AdminActionStructOutput],
    "view"
  >;

  getPendingActionsCount: TypedContractMethod<[], [bigint], "view">;

  getTimeLock: TypedContractMethod<
    [lockId: BigNumberish],
    [AdvancedGovernance.TimeLockStructOutput],
    "view"
  >;

  hasPermission: TypedContractMethod<
    [admin: AddressLike, functionSelector: BytesLike],
    [boolean],
    "view"
  >;

  isAdmin: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  minimumStake: TypedContractMethod<[], [bigint], "view">;

  nextActionId: TypedContractMethod<[], [bigint], "view">;

  nextTimeLockId: TypedContractMethod<[], [bigint], "view">;

  pendingActions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        actionType: bigint;
        proposer: string;
        target: string;
        newRole: bigint;
        amount: bigint;
        data: string;
        confirmations: bigint;
        requiredConfirmations: bigint;
        deadline: bigint;
        executed: boolean;
        cancelled: boolean;
        reason: string;
      }
    ],
    "view"
  >;

  proposeAddAdmin: TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  proposeRemoveAdmin: TypedContractMethod<
    [admin: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  proposeRoleChange: TypedContractMethod<
    [admin: AddressLike, newRole: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  proposeSlashAdmin: TypedContractMethod<
    [admin: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  requiredConfirmations: TypedContractMethod<[], [bigint], "view">;

  resolveEmergency: TypedContractMethod<[], [void], "nonpayable">;

  rewardPool: TypedContractMethod<[], [bigint], "view">;

  rolePermissions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;

  scheduleTimeLockAddAdmin: TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish, delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  slashPercentage: TypedContractMethod<[], [bigint], "view">;

  stakeForAdmin: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakingToken: TypedContractMethod<[], [string], "view">;

  timeLocks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        AdvancedGovernance.AdminActionStructOutput,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        action: AdvancedGovernance.AdminActionStructOutput;
        unlockTime: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;

  totalAdmins: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  triggerEmergency: TypedContractMethod<[], [void], "nonpayable">;

  withdrawStake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "actionConfirmations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "adminInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        role: bigint;
        stakedAmount: bigint;
        slashCount: bigint;
        rewardsClaimed: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "adminList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "canExecuteAction"
  ): TypedContractMethod<[actionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelAction"
  ): TypedContractMethod<[actionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelTimeLock"
  ): TypedContractMethod<[lockId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmAction"
  ): TypedContractMethod<[actionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultTimeLockDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyAddAdmin"
  ): TypedContractMethod<
    [admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyTriggeredBy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeAction"
  ): TypedContractMethod<[actionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeSlash"
  ): TypedContractMethod<[actionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTimeLock"
  ): TypedContractMethod<[lockId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAdminInfo"
  ): TypedContractMethod<
    [_address: AddressLike],
    [AdvancedGovernance.AdminInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdminRole"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPendingAction"
  ): TypedContractMethod<
    [actionId: BigNumberish],
    [AdvancedGovernance.AdminActionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingActionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimeLock"
  ): TypedContractMethod<
    [lockId: BigNumberish],
    [AdvancedGovernance.TimeLockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [admin: AddressLike, functionSelector: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "minimumStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextActionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTimeLockId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingActions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        actionType: bigint;
        proposer: string;
        target: string;
        newRole: bigint;
        amount: bigint;
        data: string;
        confirmations: bigint;
        requiredConfirmations: bigint;
        deadline: bigint;
        executed: boolean;
        cancelled: boolean;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeAddAdmin"
  ): TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeRemoveAdmin"
  ): TypedContractMethod<
    [admin: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeRoleChange"
  ): TypedContractMethod<
    [admin: AddressLike, newRole: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeSlashAdmin"
  ): TypedContractMethod<
    [admin: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requiredConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resolveEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rolePermissions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "scheduleTimeLockAddAdmin"
  ): TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish, delay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeForAdmin"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timeLocks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        AdvancedGovernance.AdminActionStructOutput,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        action: AdvancedGovernance.AdminActionStructOutput;
        unlockTime: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAdmins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "triggerEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ActionCancelled"
  ): TypedContractEvent<
    ActionCancelledEvent.InputTuple,
    ActionCancelledEvent.OutputTuple,
    ActionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ActionConfirmed"
  ): TypedContractEvent<
    ActionConfirmedEvent.InputTuple,
    ActionConfirmedEvent.OutputTuple,
    ActionConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "ActionExecuted"
  ): TypedContractEvent<
    ActionExecutedEvent.InputTuple,
    ActionExecutedEvent.OutputTuple,
    ActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ActionProposed"
  ): TypedContractEvent<
    ActionProposedEvent.InputTuple,
    ActionProposedEvent.OutputTuple,
    ActionProposedEvent.OutputObject
  >;
  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRoleChanged"
  ): TypedContractEvent<
    AdminRoleChangedEvent.InputTuple,
    AdminRoleChangedEvent.OutputTuple,
    AdminRoleChangedEvent.OutputObject
  >;
  getEvent(
    key: "AdminSlashed"
  ): TypedContractEvent<
    AdminSlashedEvent.InputTuple,
    AdminSlashedEvent.OutputTuple,
    AdminSlashedEvent.OutputObject
  >;
  getEvent(
    key: "AdminStaked"
  ): TypedContractEvent<
    AdminStakedEvent.InputTuple,
    AdminStakedEvent.OutputTuple,
    AdminStakedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyModeToggled"
  ): TypedContractEvent<
    EmergencyModeToggledEvent.InputTuple,
    EmergencyModeToggledEvent.OutputTuple,
    EmergencyModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TimeLockExecuted"
  ): TypedContractEvent<
    TimeLockExecutedEvent.InputTuple,
    TimeLockExecutedEvent.OutputTuple,
    TimeLockExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TimeLockScheduled"
  ): TypedContractEvent<
    TimeLockScheduledEvent.InputTuple,
    TimeLockScheduledEvent.OutputTuple,
    TimeLockScheduledEvent.OutputObject
  >;

  filters: {
    "ActionCancelled(uint256,address)": TypedContractEvent<
      ActionCancelledEvent.InputTuple,
      ActionCancelledEvent.OutputTuple,
      ActionCancelledEvent.OutputObject
    >;
    ActionCancelled: TypedContractEvent<
      ActionCancelledEvent.InputTuple,
      ActionCancelledEvent.OutputTuple,
      ActionCancelledEvent.OutputObject
    >;

    "ActionConfirmed(uint256,address)": TypedContractEvent<
      ActionConfirmedEvent.InputTuple,
      ActionConfirmedEvent.OutputTuple,
      ActionConfirmedEvent.OutputObject
    >;
    ActionConfirmed: TypedContractEvent<
      ActionConfirmedEvent.InputTuple,
      ActionConfirmedEvent.OutputTuple,
      ActionConfirmedEvent.OutputObject
    >;

    "ActionExecuted(uint256,address)": TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;
    ActionExecuted: TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;

    "ActionProposed(uint256,address,uint8)": TypedContractEvent<
      ActionProposedEvent.InputTuple,
      ActionProposedEvent.OutputTuple,
      ActionProposedEvent.OutputObject
    >;
    ActionProposed: TypedContractEvent<
      ActionProposedEvent.InputTuple,
      ActionProposedEvent.OutputTuple,
      ActionProposedEvent.OutputObject
    >;

    "AdminAdded(address,uint8,uint256)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address,uint8)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "AdminRoleChanged(address,uint8,uint8)": TypedContractEvent<
      AdminRoleChangedEvent.InputTuple,
      AdminRoleChangedEvent.OutputTuple,
      AdminRoleChangedEvent.OutputObject
    >;
    AdminRoleChanged: TypedContractEvent<
      AdminRoleChangedEvent.InputTuple,
      AdminRoleChangedEvent.OutputTuple,
      AdminRoleChangedEvent.OutputObject
    >;

    "AdminSlashed(address,uint256,string)": TypedContractEvent<
      AdminSlashedEvent.InputTuple,
      AdminSlashedEvent.OutputTuple,
      AdminSlashedEvent.OutputObject
    >;
    AdminSlashed: TypedContractEvent<
      AdminSlashedEvent.InputTuple,
      AdminSlashedEvent.OutputTuple,
      AdminSlashedEvent.OutputObject
    >;

    "AdminStaked(address,uint256)": TypedContractEvent<
      AdminStakedEvent.InputTuple,
      AdminStakedEvent.OutputTuple,
      AdminStakedEvent.OutputObject
    >;
    AdminStaked: TypedContractEvent<
      AdminStakedEvent.InputTuple,
      AdminStakedEvent.OutputTuple,
      AdminStakedEvent.OutputObject
    >;

    "EmergencyModeToggled(bool,address)": TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;
    EmergencyModeToggled: TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "TimeLockExecuted(uint256)": TypedContractEvent<
      TimeLockExecutedEvent.InputTuple,
      TimeLockExecutedEvent.OutputTuple,
      TimeLockExecutedEvent.OutputObject
    >;
    TimeLockExecuted: TypedContractEvent<
      TimeLockExecutedEvent.InputTuple,
      TimeLockExecutedEvent.OutputTuple,
      TimeLockExecutedEvent.OutputObject
    >;

    "TimeLockScheduled(uint256,uint256)": TypedContractEvent<
      TimeLockScheduledEvent.InputTuple,
      TimeLockScheduledEvent.OutputTuple,
      TimeLockScheduledEvent.OutputObject
    >;
    TimeLockScheduled: TypedContractEvent<
      TimeLockScheduledEvent.InputTuple,
      TimeLockScheduledEvent.OutputTuple,
      TimeLockScheduledEvent.OutputObject
    >;
  };
}
